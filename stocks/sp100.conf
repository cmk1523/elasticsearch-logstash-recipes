input { 
	http_poller {
		urls => {
			"stock1" => "http://finance.google.com/finance/info?q=AAPL,ABBV,ABT,ACN,AGN,AIG,ALL,AMGN,AMZN,AXP,BA,BAC,BIIB,BK,BLK,BMY,BRK.B,C,CAT,CELG,CL,CMCSA,COF,COP,COST,CSCO,CVS,CVX,DD,DHR,DIS,DOW,DUK,EMR,EXC,F,FB,FDX,FOX,FOXA,GD,GE,GILD,GM,GOOG,GOOGL,GS,HAL,HD,HON,IBM,INTC,JNJ,JPM,KHC,KMI,KO,LLY,LMT,LOW,MA,MCD,MDLZ,MDT,MET,MMM,MO,MON,MRK,MS,MSFT,NEE,NKE,ORCL,OXY,PCLN,PEP,PFE,PG,PM,PYPL,QCOM,RTN,SBUX,SLB,SO,SPG,T,TGT,TWX,TXN,UNH,UNP,UPS,USB,UTX,V,VZ,WBA,WFC,WMT,XOM"
		}
		tags => "sp100"
		#every hour (every time minute is at 0)
		schedule => { cron => "*/5 * * * * UTC"}
		#interval => 30
		codec => "plain"
	}
}

filter {
	if "sp100" in [tags] {
		mutate {
			gsub => [
				"message", "\n", ""
			]
		}

		grok {
			match => {
				"message" => "// %{GREEDYDATA:jsonAsString}"
			}
		}

		json {
					source => "jsonAsString"
					target => "json"
			
		}

		split {
			field => "json"
		}

		mutate {
			rename => [
				"[json][id]", "id",
				"[json][t]", "t",
				"[json][e]", "e",
				"[json][l]", "l",
				"[json][l_fix]", "l_fix",
				"[json][l_cur]", "l_cur",
				"[json][s]", "s",
				"[json][ltt]", "ltt",
				"[json][lt]", "lt",
				"[json][lt_dts]", "lt_dts",
				"[json][c]", "c",
				"[json][c_fix]", "c_fix",
				"[json][cp]", "cp",
				"[json][cp_fix]", "cp_fix",
				"[json][ccol]", "ccol",
				"[json][pcls_fix]", "pcls_fix",	
				"[json][el]", "el", 
				"[json][el_fix]", "el_fix", 
				"[json][el_cur]", "el_cur",
				"[json][elt]", "elt", 
				"[json][ec]", "ec", 
				"[json][ec_fix]", "ec_fix", 
				"[json][ecp]", "ecp", 
				"[json][ecp_fix]", "ecp_fix", 
				"[json][eccol]", "eccol", 
				"[json][div]", "div",
				"[json][yld]", "yld"
			]

			remove_field => [
				"message",
				"jsonAsString",
				"lt",
				"ltt",
				"l_fix",
				"ec",
				"el_fix",
				"cp_fix",
				"l_cur",
				"el_cur",
				"ecp_fix",
				"ccol",
				"eccol",
				"s",
				"json",
				"tags"
			]
		}

		mutate {
			rename => {
				"id" => "googleId"
				"e" => "exchange"
				"t" => "symbol"
				"l" => "lastPrice"
				"lt" => "lastTradeDate"
				"ltt" => "lastTradeTime"
				"lt_dts" => "lastTradeDateTimeStr"
				"c" => "change"
				"c_fix" => "absoluteChange"
				"cp" => "changePercentage"
				"el" => "lastPriceInExtendedHours"
				"elt" => "extendedHoursLastTradeDateTimeStr"
				"ec_fix" => "absoluteExtendedHoursChange"
				"ecp" => "extendedHoursChangePercentage"
				"yld" => "dividendYield"
				"div" => "dividend"
				"pcls_fix" => "previousClose"
			}
		}

		grok {
			match => {
				"lastTradeDateTimeStr" => "(?<lastTradeTime>[0-9]{2}:[0-9]{2})"
			}
		}

		mutate {
			gsub => [
				"lastTradeTime", ":", ""
			]
		}

		date {
			match => [ "extendedHoursLastTradeDateTimeStr", "MMM dd, h:mmaa zzz" ]
			remove_field => "extendedHoursLastTradeDateTimeStr"
			target => "extendedHoursLastTradeDateTime"
		}

		grok {
			match => {
				"extendedHoursLastTradeDateTime" => "%{GREEDYDATA:extendedHoursLastTradeDateTimeStr}"
			}
		}

		grok {
			match => {
				"extendedHoursLastTradeDateTimeStr" => "(?<extendedHoursLastTradeTime>[0-9]{2}:[0-9]{2})"
			}
		}

		mutate {
			gsub => [
				"extendedHoursLastTradeTime", ":", ""
			]
		}

		date {
			match => [ "lastTradeDateTimeStr", "ISO8601" ]
			remove_field => "lastTradeDateTimeStr"
			target => "lastTradeDateTime"
		}

		grok {
			match => {
				"@timestamp" => "%{GREEDYDATA:timestampStr}"
			}
		}

		grok {
			match => {
				"timestampStr" => "(?<timestampTime>[0-9]{2}:[0-9]{2})"
			}
		}

		mutate {
			gsub => [
				"timestampTime", ":", ""
			]
		}

		mutate {
			convert => {
				"lastPrice" => "float"
				"absoluteChange" => "float"
				"dividendYield" => "float"
				"previousClose" => "float"
				"extendedHoursChangePercentage" => "float"
				"dividend" => "float"
				"changePercentage" => "float"
				"absoluteExtendedHoursChange" => "float"
				"lastPriceInExtendedHours" => "float"
				"change" => "float"
				"lastTradeTime" => "integer"
				"extendedHoursLastTradeTime" => "integer"
				"timestampTime" => "integer"
			}

			remove_field => [
				"timestampStr"
			]
		}
	}
}
 
output { 
	if "sp100" in [tags] {
		#stdout { } 
		#stdout { codec => rubydebug }
		elasticsearch {
			action => "index"
			doc_as_upsert => true
			hosts => ["cmk-es-01:9200"]
			index => "stocks"
			document_type => "sp100"
			user => "elastic"
			password => "changeme"
		}
	}
}
